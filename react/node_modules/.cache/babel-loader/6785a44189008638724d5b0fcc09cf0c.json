{"ast":null,"code":"import _objectSpread from \"/Users/kyle/workspace/React/firebase-tutorial/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kyle/workspace/React/firebase-tutorial/src/components/SignIn/index.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\nimport { SignUpLink } from \"../SignUp\";\nimport { PasswordForgetLink } from \"../PasswordForget\";\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\nimport { isFulfilled } from \"q\";\n\nconst SignInPage = () => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"SignIn\"), React.createElement(SignInForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), React.createElement(SignInGoogle, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), React.createElement(PasswordForgetLink, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), React.createElement(SignUpLink, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}));\n\nconst INITIAL_STATE = {\n  email: \"\",\n  password: \"\",\n  error: null\n};\nconst ERROR_CODE_ACCOUNT_EXISTS = \"auth/account-exists-with-different-credential\";\nconst ERROR_MSG_ACCOUNT_EXISTS = \"\\n  An account with an E-Mail address to\\n  this social account already exists. Try to login from\\n  this account instead and associate your accounts on\\n  your personal account page.\\n\";\n\nclass SignInGoogleBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = event => {\n      this.props.firebase.doSignInWithGoogle().then(socialAuthUser => {\n        // Create a user in Firebase Realtime Database\n        return this.props.firebase.user(socialAuthUser.user.uid).set({\n          username: socialAuthUser.user.displayName,\n          email: socialAuthUser.user.email,\n          roles: {}\n        });\n      }).then(() => {\n        this.setState({\n          error: null\n        });\n        this.props.history.push(ROUTES.HOME);\n      }).catch(error => {\n        if (error.code === ERROR_CODE_ACCOUNT_EXISTS) {\n          error.message = ERROR_MSG_ACCOUNT_EXISTS;\n        }\n      });\n      event.preventDefault();\n    };\n\n    this.state = {\n      error: null\n    };\n  }\n\n  render() {\n    const error = this.state.error;\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Sign In with Google\"), error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, error.message));\n  }\n\n}\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = event => {\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n      this.props.firebase.doSignInWithEmailAndPassword(email, password).then(() => {\n        this.setState(_objectSpread({}, INITIAL_STATE));\n        this.props.history.push(ROUTES.HOME);\n      }).catch(error => {\n        this.setState({\n          error\n        });\n      });\n      event.preventDefault();\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = _objectSpread({}, INITIAL_STATE);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          email = _this$state2.email,\n          password = _this$state2.password,\n          error = _this$state2.error;\n    const isInvalid = password === \"\" || email === \"\";\n    return React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"email\",\n      value: email,\n      onChange: this.onChange,\n      type: \"text\",\n      placeholder: \"Email Address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"password\",\n      value: password,\n      onChange: this.onChange,\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      disabled: isInvalid,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Sign In\"), error && React.createElement(\"p\", {\n      class: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, error.message));\n  }\n\n}\n\nconst SignInForm = compose(withRouter, withFirebase)(SignInFormBase);\nconst SignInGoogle = compose(withRouter, withFirebase)(SignInGoogleBase);\nexport default SignInPage;\nexport { SignInForm, SignInGoogle };","map":{"version":3,"sources":["/Users/kyle/workspace/React/firebase-tutorial/src/components/SignIn/index.js"],"names":["React","Component","withRouter","compose","SignUpLink","PasswordForgetLink","withFirebase","ROUTES","isFulfilled","SignInPage","INITIAL_STATE","email","password","error","ERROR_CODE_ACCOUNT_EXISTS","ERROR_MSG_ACCOUNT_EXISTS","SignInGoogleBase","constructor","props","onSubmit","event","firebase","doSignInWithGoogle","then","socialAuthUser","user","uid","set","username","displayName","roles","setState","history","push","HOME","catch","code","message","preventDefault","state","render","SignInFormBase","doSignInWithEmailAndPassword","onChange","target","name","value","isInvalid","SignInForm","SignInGoogle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\n\nimport { SignUpLink } from \"../SignUp\";\nimport { PasswordForgetLink } from \"../PasswordForget\";\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\nimport { isFulfilled } from \"q\";\n\nconst SignInPage = () => (\n  <div>\n    <h1>SignIn</h1>\n    <SignInForm />\n    <SignInGoogle />\n    <PasswordForgetLink />\n    <SignUpLink />\n  </div>\n);\n\nconst INITIAL_STATE = {\n  email: \"\",\n  password: \"\",\n  error: null\n};\n\nconst ERROR_CODE_ACCOUNT_EXISTS =\n  \"auth/account-exists-with-different-credential\";\n\nconst ERROR_MSG_ACCOUNT_EXISTS = `\n  An account with an E-Mail address to\n  this social account already exists. Try to login from\n  this account instead and associate your accounts on\n  your personal account page.\n`;\n\nclass SignInGoogleBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { error: null };\n  }\n\n  onSubmit = event => {\n    this.props.firebase\n      .doSignInWithGoogle()\n      .then(socialAuthUser => {\n        // Create a user in Firebase Realtime Database\n        return this.props.firebase.user(socialAuthUser.user.uid).set({\n          username: socialAuthUser.user.displayName,\n          email: socialAuthUser.user.email,\n          roles: {}\n        });\n      })\n      .then(() => {\n        this.setState({ error: null });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        if (error.code === ERROR_CODE_ACCOUNT_EXISTS) {\n          error.message = ERROR_MSG_ACCOUNT_EXISTS;\n        }\n      });\n\n    event.preventDefault();\n  };\n\n  render() {\n    const { error } = this.state;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <button type=\"submit\">Sign In with Google</button>\n\n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n\n  onSubmit = event => {\n    const { email, password } = this.state;\n\n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { email, password, error } = this.state;\n\n    const isInvalid = password === \"\" || email === \"\";\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n\n        {error && <p class=\"text-danger\">{error.message}</p>}\n      </form>\n    );\n  }\n}\n\nconst SignInForm = compose(\n  withRouter,\n  withFirebase\n)(SignInFormBase);\n\nconst SignInGoogle = compose(\n  withRouter,\n  withFirebase\n)(SignInGoogleBase);\n\nexport default SignInPage;\n\nexport { SignInForm, SignInGoogle };\n"]},"metadata":{},"sourceType":"module"}