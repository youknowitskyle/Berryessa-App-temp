{"ast":null,"code":"import _objectSpread from \"/Users/kyle/workspace/React/firebase-tutorial/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kyle/workspace/React/firebase-tutorial/src/components/Home/index.js\";\nimport React, { Component } from \"react\";\nimport { compose } from \"recompose\";\nimport { AuthUserContext, withAuthorization, withEmailVerification } from \"../Session\";\nimport { withFirebase } from \"../Firebase\";\n\nconst HomePage = () => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"Home Page\"), React.createElement(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, \"You are authenticated.\"), React.createElement(Messages, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}));\n\nclass MessagesBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeText = event => {\n      this.setState({\n        text: event.target.value\n      });\n    };\n\n    this.onCreateMessage = (event, authUser) => {\n      this.props.firebase.messages().push({\n        text: this.state.text,\n        userId: authUser.uid,\n        username: authUser.username\n      });\n      this.setState({\n        text: \"\"\n      });\n      event.preventDefault();\n    };\n\n    this.onRemoveMessage = uid => {\n      this.props.firebase.message(uid).remove();\n    };\n\n    this.state = {\n      text: \"\",\n      loading: false,\n      message: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.props.firebase.messages().on(\"value\", snapshot => {\n      const messageObject = snapshot.val();\n\n      if (messageObject) {\n        const messageList = Object.keys(messageObject).map(key => _objectSpread({}, messageObject[key], {\n          uid: key\n        }));\n        this.setState({\n          messages: messageList,\n          loading: false\n        });\n      } else {\n        this.setState({\n          messages: null,\n          loading: false\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.firebase.messages().off();\n  }\n\n  render() {\n    const _this$state = this.state,\n          text = _this$state.text,\n          messages = _this$state.messages,\n          loading = _this$state.loading;\n    return React.createElement(AuthUserContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, authUser => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Loading ...\"), messages ? React.createElement(MessageList, {\n      messages: messages,\n      onRemoveMessage: this.onRemoveMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"There are no messages...\"), React.createElement(\"form\", {\n      onSubmit: event => this.onCreateMessage(event, authUser),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: text,\n      onChange: this.onChangeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Send\"))));\n  }\n\n}\n\nconst MessageList = ({\n  messages,\n  onRemoveMessage\n}) => React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}, messages.map(message => React.createElement(MessageItem, {\n  key: message.uid,\n  message: message,\n  onRemoveMessage: onRemoveMessage,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n})));\n\nconst MessageItem = ({\n  message,\n  onRemoveMessage\n}) => React.createElement(\"li\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 121\n  },\n  __self: this\n}, message.username), \" \", message.text, React.createElement(\"button\", {\n  type: \"button\",\n  onClick: () => onRemoveMessage(message.uid),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 122\n  },\n  __self: this\n}, \"Delete\"));\n\nconst Messages = withFirebase(MessagesBase);\n\nconst condition = authUser => !!authUser; //or equivalently:\n//const condition = authUser => authUser != null;\n\n\nexport default withAuthorization(condition)(HomePage);","map":{"version":3,"sources":["/Users/kyle/workspace/React/firebase-tutorial/src/components/Home/index.js"],"names":["React","Component","compose","AuthUserContext","withAuthorization","withEmailVerification","withFirebase","HomePage","MessagesBase","constructor","props","onChangeText","event","setState","text","target","value","onCreateMessage","authUser","firebase","messages","push","state","userId","uid","username","preventDefault","onRemoveMessage","message","remove","loading","componentDidMount","on","snapshot","messageObject","val","messageList","Object","keys","map","key","componentWillUnmount","off","render","MessageList","MessageItem","Messages","condition"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { compose } from \"recompose\";\n\nimport {\n  AuthUserContext,\n  withAuthorization,\n  withEmailVerification\n} from \"../Session\";\nimport { withFirebase } from \"../Firebase\";\n\nconst HomePage = () => (\n  <div>\n    <h1>Home Page</h1>\n    <p>You are authenticated.</p>\n\n    <Messages />\n  </div>\n);\n\nclass MessagesBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      loading: false,\n      message: []\n    };\n  }\n\n  onChangeText = event => {\n    this.setState({ text: event.target.value });\n  };\n\n  onCreateMessage = (event, authUser) => {\n    this.props.firebase.messages().push({\n      text: this.state.text,\n      userId: authUser.uid,\n      username: authUser.username\n    });\n\n    this.setState({ text: \"\" });\n\n    event.preventDefault();\n  };\n\n  componentDidMount() {\n    this.setState({ loading: true });\n\n    this.props.firebase.messages().on(\"value\", snapshot => {\n      const messageObject = snapshot.val();\n\n      if (messageObject) {\n        const messageList = Object.keys(messageObject).map(key => ({\n          ...messageObject[key],\n          uid: key\n        }));\n        this.setState({\n          messages: messageList,\n          loading: false\n        });\n      } else {\n        this.setState({ messages: null, loading: false });\n      }\n\n      this.setState({ loading: false });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.firebase.messages().off();\n  }\n\n  onRemoveMessage = uid => {\n    this.props.firebase.message(uid).remove();\n  };\n\n  render() {\n    const { text, messages, loading } = this.state;\n\n    return (\n      <AuthUserContext.Consumer>\n        {authUser => (\n          <div>\n            {loading && <div>Loading ...</div>}\n\n            {messages ? (\n              <MessageList\n                messages={messages}\n                onRemoveMessage={this.onRemoveMessage}\n              />\n            ) : (\n              <div>There are no messages...</div>\n            )}\n\n            <form onSubmit={event => this.onCreateMessage(event, authUser)}>\n              <input type=\"text\" value={text} onChange={this.onChangeText} />\n              <button type=\"submit\">Send</button>\n            </form>\n          </div>\n        )}\n      </AuthUserContext.Consumer>\n    );\n  }\n}\n\nconst MessageList = ({ messages, onRemoveMessage }) => (\n  <ul>\n    {messages.map(message => (\n      <MessageItem\n        key={message.uid}\n        message={message}\n        onRemoveMessage={onRemoveMessage}\n      />\n    ))}\n  </ul>\n);\n\nconst MessageItem = ({ message, onRemoveMessage }) => (\n  <li>\n    <strong>{message.username}</strong> {message.text}\n    <button type=\"button\" onClick={() => onRemoveMessage(message.uid)}>\n      Delete\n    </button>\n  </li>\n);\n\nconst Messages = withFirebase(MessagesBase);\n\nconst condition = authUser => !!authUser;\n\n//or equivalently:\n//const condition = authUser => authUser != null;\n\nexport default withAuthorization(condition)(HomePage);\n"]},"metadata":{},"sourceType":"module"}