{"ast":null,"code":"import _objectSpread from \"/Users/kyle/workspace/React/firebase-tutorial/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kyle/workspace/React/firebase-tutorial/src/components/Session/withAuthentication.js\";\nimport React from \"react\";\nimport AuthUserContext from \"./context\";\nimport { withFirebase } from \"../Firebase\";\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.firebase.user(authUser.uid).once(\"value\").then(snapshot => {\n            const dbUser = snapshot.val(); //default empty roles\n\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            } // merge auth and db user\n\n\n            authUser = _objectSpread({\n              uid: authUser.uid,\n              email: authUser.email\n            }, dbUser);\n            this.setState({\n              authUSer\n            });\n          });\n        } else {\n          this.setState({\n            authUser: null\n          });\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return React.createElement(AuthUserContext.Provider, {\n        value: this.state.authUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Component, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/Users/kyle/workspace/React/firebase-tutorial/src/components/Session/withAuthentication.js"],"names":["React","AuthUserContext","withFirebase","withAuthentication","Component","WithAuthentication","constructor","props","state","authUser","componentDidMount","listener","firebase","auth","onAuthStateChanged","user","uid","once","then","snapshot","dbUser","val","roles","email","setState","authUSer","componentWillUnmount","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,kBAAkB,GAAGC,SAAS,IAAI;AACtC,QAAMC,kBAAN,SAAiCL,KAAK,CAACI,SAAvC,CAAiD;AAC/CE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,QAAL,GAAgB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CAA4CL,QAAQ,IAAI;AACtE,YAAIA,QAAJ,EAAc;AACZ,eAAKF,KAAL,CAAWK,QAAX,CACGG,IADH,CACQN,QAAQ,CAACO,GADjB,EAEGC,IAFH,CAEQ,OAFR,EAGGC,IAHH,CAGQC,QAAQ,IAAI;AAChB,kBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADgB,CAGhB;;AACA,gBAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,cAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,aANe,CAQhB;;;AACAb,YAAAA,QAAQ;AACNO,cAAAA,GAAG,EAAEP,QAAQ,CAACO,GADR;AAENO,cAAAA,KAAK,EAAEd,QAAQ,CAACc;AAFV,eAGHH,MAHG,CAAR;AAMA,iBAAKI,QAAL,CAAc;AAAEC,cAAAA;AAAF,aAAd;AACD,WAnBH;AAoBD,SArBD,MAqBO;AACL,eAAKD,QAAL,CAAc;AAAEf,YAAAA,QAAQ,EAAE;AAAZ,WAAd;AACD;AACF,OAzBe,CAAhB;AA0BD;;AAEDiB,IAAAA,oBAAoB,GAAG;AACrB,WAAKf,QAAL;AACD;;AAEDgB,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,QAAA,KAAK,EAAE,KAAKnB,KAAL,CAAWC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD,oBAAe,KAAKF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;AAhD8C;;AAkDjD,SAAOL,YAAY,CAACG,kBAAD,CAAnB;AACD,CApDD;;AAsDA,eAAeF,kBAAf","sourcesContent":["import React from \"react\";\n\nimport AuthUserContext from \"./context\";\nimport { withFirebase } from \"../Firebase\";\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        if (authUser) {\n          this.props.firebase\n            .user(authUser.uid)\n            .once(\"value\")\n            .then(snapshot => {\n              const dbUser = snapshot.val();\n\n              //default empty roles\n              if (!dbUser.roles) {\n                dbUser.roles = {};\n              }\n\n              // merge auth and db user\n              authUser = {\n                uid: authUser.uid,\n                email: authUser.email,\n                ...dbUser\n              };\n\n              this.setState({ authUSer });\n            });\n        } else {\n          this.setState({ authUser: null });\n        }\n      });\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;\n"]},"metadata":{},"sourceType":"module"}