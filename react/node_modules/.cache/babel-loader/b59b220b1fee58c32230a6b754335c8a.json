{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/workspace/React/firebase-tutorial/src/components/Account/index.js\";\nimport React, { Component } from \"react\";\nimport { withFirebase } from \"../Firebase\";\nimport { PasswordForgetForm } from \"../PasswordForget\";\nimport PasswordChangeForm from \"../PasswordChange\";\nimport { withAuthorization, AuthUserContext } from \"../Session\";\nimport { tsImportEqualsDeclaration } from \"@babel/types\";\nconst SIGN_IN_METHODS = [{\n  id: \"password\",\n  provider: null\n}, {\n  id: \"google.com\",\n  provider: \"googleProvider\"\n}];\n\nclass LoginManagementBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchSignInMethods = () => {\n      this.props.firebase.auth.fetchSignInMethodsForEmail(this.props.authUser.email).then(activeSignInMethods => this.setState({\n        activeSignInMethods,\n        error: null\n      })).catch(error => this.setState({\n        error\n      }));\n    };\n\n    this.onSocialLoginLink = provider => {};\n\n    this.onUnlink = providerId => {};\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSignInMethods();\n  }\n\n  render() {\n    const _this$state = this.state,\n          activeSignInMethods = _this$state.activeSignInMethods,\n          error = _this$state.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Sign In Methods:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, SIGN_IN_METHODS.map(signInMethod => {\n      const isEnabled = activeSignInMethods.includes(signInMethod.id);\n      return React.createElement(\"li\", {\n        key: signInMethod.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, isEnabled ? React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => this.onUnlink(signInMethod.id),\n        disabled: onlyOneLeft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Deactivate \", signInMethod.id) : React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => this.onSocialLoginLink(signInMethod.provider),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Link \", signInMethod.id));\n    })), error && error.message);\n  }\n\n}\n\nconst LoginManagement = withFirebase(LoginManagementBase);\n\nconst AccountPage = () => React.createElement(AuthUserContext.Consumer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 90\n  },\n  __self: this\n}, authUser => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 92\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93\n  },\n  __self: this\n}, \"Account: \", authUser.email), React.createElement(PasswordChangeForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}), React.createElement(LoginManagement, {\n  authUser: authUser,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96\n  },\n  __self: this\n})));\n\nconst condition = authUser => authUser != null;\n\nexport default withAuthorization(condition)(AccountPage);","map":{"version":3,"sources":["/Users/kyle/workspace/React/firebase-tutorial/src/components/Account/index.js"],"names":["React","Component","withFirebase","PasswordForgetForm","PasswordChangeForm","withAuthorization","AuthUserContext","tsImportEqualsDeclaration","SIGN_IN_METHODS","id","provider","LoginManagementBase","constructor","props","fetchSignInMethods","firebase","auth","fetchSignInMethodsForEmail","authUser","email","then","activeSignInMethods","setState","error","catch","onSocialLoginLink","onUnlink","providerId","state","componentDidMount","render","map","signInMethod","isEnabled","includes","onlyOneLeft","message","LoginManagement","AccountPage","condition"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { withFirebase } from \"../Firebase\";\nimport { PasswordForgetForm } from \"../PasswordForget\";\nimport PasswordChangeForm from \"../PasswordChange\";\nimport { withAuthorization, AuthUserContext } from \"../Session\";\nimport { tsImportEqualsDeclaration } from \"@babel/types\";\n\nconst SIGN_IN_METHODS = [\n  {\n    id: \"password\",\n    provider: null\n  },\n  {\n    id: \"google.com\",\n    provider: \"googleProvider\"\n  }\n];\n\nclass LoginManagementBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSignInMethods();\n  }\n\n  fetchSignInMethods = () => {\n    this.props.firebase.auth\n      .fetchSignInMethodsForEmail(this.props.authUser.email)\n      .then(activeSignInMethods =>\n        this.setState({ activeSignInMethods, error: null })\n      )\n      .catch(error => this.setState({ error }));\n  };\n\n  onSocialLoginLink = provider => {};\n\n  onUnlink = providerId => {};\n\n  render() {\n    const { activeSignInMethods, error } = this.state;\n\n    return (\n      <div>\n        Sign In Methods:\n        <ul>\n          {SIGN_IN_METHODS.map(signInMethod => {\n            const isEnabled = activeSignInMethods.includes(signInMethod.id);\n\n            return (\n              <li key={signInMethod.id}>\n                {isEnabled ? (\n                  <button\n                    type=\"button\"\n                    onClick={() => this.onUnlink(signInMethod.id)}\n                    disabled={onlyOneLeft}\n                  >\n                    Deactivate {signInMethod.id}\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    onClick={() =>\n                      this.onSocialLoginLink(signInMethod.provider)\n                    }\n                  >\n                    Link {signInMethod.id}\n                  </button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n        {error && error.message}\n      </div>\n    );\n  }\n}\n\nconst LoginManagement = withFirebase(LoginManagementBase);\n\nconst AccountPage = () => (\n  <AuthUserContext.Consumer>\n    {authUser => (\n      <div>\n        <h1>Account: {authUser.email}</h1>\n        {/*} <PasswordForgetForm /> */}\n        <PasswordChangeForm />\n        <LoginManagement authUser={authUser} />\n      </div>\n    )}\n  </AuthUserContext.Consumer>\n);\n\nconst condition = authUser => authUser != null;\n\nexport default withAuthorization(condition)(AccountPage);\n"]},"metadata":{},"sourceType":"module"}