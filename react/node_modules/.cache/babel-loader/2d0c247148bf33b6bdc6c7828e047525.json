{"ast":null,"code":"var _jsxFileName = \"/Users/kyle/workspace/React/firebase-tutorial/src/components/Account/index.js\";\nimport React, { Component } from \"react\";\nimport { withFirebase } from \"../Firebase\";\nimport { PasswordForgetForm } from \"../PasswordForget\";\nimport PasswordChangeForm from \"../PasswordChange\";\nimport { withAuthorization, AuthUserContext } from \"../Session\";\nimport { tsImportEqualsDeclaration } from \"@babel/types\";\nconst SIGN_IN_METHODS = [{\n  id: \"password\",\n  provider: null\n}, {\n  id: \"google.com\",\n  provider: \"googleProvider\"\n}];\n\nclass LoginManagementBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchSignInMethods = () => {\n      this.props.firebase.auth.fetchSignInMethodsForEmail(this.props.authUser.email).then(activeSignInMethods => this.setState({\n        activeSignInMethods,\n        error: null\n      })).catch(error => this.setState({\n        error\n      }));\n    };\n\n    this.onSocialLoginLink = provider => {\n      this.props.firebase.auth.currentUser.linkWithPopup(this.props.firebase[provider]).then(this.fetchSignInMethods).catch(error => this.setState({\n        error\n      }));\n    };\n\n    this.onUnlink = providerId => {\n      this.props.firebase.auth.currentUser.unlink(providerId).then(this.fetchSignInMethods).catch(error => this.setState({\n        error\n      }));\n    };\n\n    this.onDefaultLoginLink = () => {};\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSignInMethods();\n  }\n\n  render() {\n    const _this$state = this.state,\n          activeSignInMethods = _this$state.activeSignInMethods,\n          error = _this$state.error;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Sign In Methods:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, SIGN_IN_METHODS.map(signInMethod => {\n      const onlyOneLeft = activeSignInMethods.length === 1;\n      const isEnabled = activeSignInMethods.includes(signInMethod.id);\n      return React.createElement(\"li\", {\n        key: signInMethod.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, signInMethod.id === \"password\" ? React.createElement(DefaultLoginToggle, {\n        onlyOneLeft: onlyOneLeft,\n        isEnabled: isEnabled,\n        signInMethod: signInMethod,\n        onLink: this.onDefaultLoginLink,\n        onUnlink: this.onUnlink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }) : React.createElement(SocialLoginToggle, {\n        onlyOneLeft: onlyOneLeft,\n        isEnabled: isEnabled,\n        signInMethod: signInMethod,\n        onLink: this.onSocialLoginLink,\n        onUnlink: this.onUnlink,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }));\n    })), error && error.message);\n  }\n\n}\n\nconst SocialLoginToggle = ({\n  onlyOneLeft,\n  isEnabled,\n  signInMethod,\n  onLink,\n  onUnlink\n}) => isEnabled ? React.createElement(\"button\", {\n  type: \"button\",\n  onClick: () => onUnlink(signInMethod.id),\n  disabled: onlyOneLeft,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}, \"Deactivate \", signInMethod.id) : React.createElement(\"button\", {\n  type: \"button\",\n  onClick: () => onLink(signInMethod.provider),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 115\n  },\n  __self: this\n}, \"Link \", signInMethod.id);\n\nclass DefaultLoginToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      this.props.onLink(this.state.passwordOne);\n      this.setState({\n        passwordOne: \"\",\n        passwordTwo: \"\"\n      });\n    };\n\n    this.onChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.state = {\n      passwordOne: \"\",\n      passwordTwo: \"\"\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          onlyOneLeft = _this$props.onlyOneLeft,\n          isEnabled = _this$props.isEnabled,\n          signInMethod = _this$props.signInMethod,\n          onUnlink = _this$props.onUnlink;\n    const _this$state2 = this.state,\n          passwordOne = _this$state2.passwordOne,\n          passwordTwo = _this$state2.passwordTwo;\n    const isInvalid = passwordOne !== passwordTwo || passwordOne === \"\";\n    return isEnabled ? React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => onUnlink(signInMethod.id),\n      disabled: onlyOneLeft,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Deactivate \", signInMethod.id) : React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"passwordOne\",\n      value: passwordOne,\n      onChange: this.onChange,\n      type: \"password\",\n      placeholder: \"New Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      name: \"passwordTwo\",\n      value: passwordTwo,\n      onChange: this.onChange,\n      type: \"password\",\n      placeholder: \"Confirm New Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      disabled: isInvalid,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Link \", signInMethod.id));\n  }\n\n}\n\nconst LoginManagement = withFirebase(LoginManagementBase);\n\nconst AccountPage = () => React.createElement(AuthUserContext.Consumer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181\n  },\n  __self: this\n}, authUser => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 183\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 184\n  },\n  __self: this\n}, \"Account: \", authUser.email), React.createElement(PasswordChangeForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 186\n  },\n  __self: this\n}), React.createElement(LoginManagement, {\n  authUser: authUser,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 187\n  },\n  __self: this\n})));\n\nconst condition = authUser => authUser != null;\n\nexport default withAuthorization(condition)(AccountPage);","map":{"version":3,"sources":["/Users/kyle/workspace/React/firebase-tutorial/src/components/Account/index.js"],"names":["React","Component","withFirebase","PasswordForgetForm","PasswordChangeForm","withAuthorization","AuthUserContext","tsImportEqualsDeclaration","SIGN_IN_METHODS","id","provider","LoginManagementBase","constructor","props","fetchSignInMethods","firebase","auth","fetchSignInMethodsForEmail","authUser","email","then","activeSignInMethods","setState","error","catch","onSocialLoginLink","currentUser","linkWithPopup","onUnlink","providerId","unlink","onDefaultLoginLink","state","componentDidMount","render","map","signInMethod","onlyOneLeft","length","isEnabled","includes","message","SocialLoginToggle","onLink","DefaultLoginToggle","onSubmit","event","preventDefault","passwordOne","passwordTwo","onChange","target","name","value","isInvalid","LoginManagement","AccountPage","condition"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { withFirebase } from \"../Firebase\";\nimport { PasswordForgetForm } from \"../PasswordForget\";\nimport PasswordChangeForm from \"../PasswordChange\";\nimport { withAuthorization, AuthUserContext } from \"../Session\";\nimport { tsImportEqualsDeclaration } from \"@babel/types\";\n\nconst SIGN_IN_METHODS = [\n  {\n    id: \"password\",\n    provider: null\n  },\n  {\n    id: \"google.com\",\n    provider: \"googleProvider\"\n  }\n];\n\nclass LoginManagementBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeSignInMethods: [],\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    this.fetchSignInMethods();\n  }\n\n  fetchSignInMethods = () => {\n    this.props.firebase.auth\n      .fetchSignInMethodsForEmail(this.props.authUser.email)\n      .then(activeSignInMethods =>\n        this.setState({ activeSignInMethods, error: null })\n      )\n      .catch(error => this.setState({ error }));\n  };\n\n  onSocialLoginLink = provider => {\n    this.props.firebase.auth.currentUser\n      .linkWithPopup(this.props.firebase[provider])\n      .then(this.fetchSignInMethods)\n      .catch(error => this.setState({ error }));\n  };\n\n  onUnlink = providerId => {\n    this.props.firebase.auth.currentUser\n      .unlink(providerId)\n      .then(this.fetchSignInMethods)\n      .catch(error => this.setState({ error }));\n  };\n\n  onDefaultLoginLink = () => {};\n\n  render() {\n    const { activeSignInMethods, error } = this.state;\n\n    return (\n      <div>\n        Sign In Methods:\n        <ul>\n          {SIGN_IN_METHODS.map(signInMethod => {\n            const onlyOneLeft = activeSignInMethods.length === 1;\n            const isEnabled = activeSignInMethods.includes(signInMethod.id);\n\n            return (\n              <li key={signInMethod.id}>\n                {signInMethod.id === \"password\" ? (\n                  <DefaultLoginToggle\n                    onlyOneLeft={onlyOneLeft}\n                    isEnabled={isEnabled}\n                    signInMethod={signInMethod}\n                    onLink={this.onDefaultLoginLink}\n                    onUnlink={this.onUnlink}\n                  />\n                ) : (\n                  <SocialLoginToggle\n                    onlyOneLeft={onlyOneLeft}\n                    isEnabled={isEnabled}\n                    signInMethod={signInMethod}\n                    onLink={this.onSocialLoginLink}\n                    onUnlink={this.onUnlink}\n                  />\n                )}\n              </li>\n            );\n          })}\n        </ul>\n        {error && error.message}\n      </div>\n    );\n  }\n}\n\nconst SocialLoginToggle = ({\n  onlyOneLeft,\n  isEnabled,\n  signInMethod,\n  onLink,\n  onUnlink\n}) =>\n  isEnabled ? (\n    <button\n      type=\"button\"\n      onClick={() => onUnlink(signInMethod.id)}\n      disabled={onlyOneLeft}\n    >\n      Deactivate {signInMethod.id}\n    </button>\n  ) : (\n    <button type=\"button\" onClick={() => onLink(signInMethod.provider)}>\n      Link {signInMethod.id}\n    </button>\n  );\n\nclass DefaultLoginToggle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { passwordOne: \"\", passwordTwo: \"\" };\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n\n    this.props.onLink(this.state.passwordOne);\n    this.setState({ passwordOne: \"\", passwordTwo: \"\" });\n  };\n\n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  render() {\n    const { onlyOneLeft, isEnabled, signInMethod, onUnlink } = this.props;\n\n    const { passwordOne, passwordTwo } = this.state;\n\n    const isInvalid = passwordOne !== passwordTwo || passwordOne === \"\";\n\n    return isEnabled ? (\n      <button\n        type=\"button\"\n        onClick={() => onUnlink(signInMethod.id)}\n        disabled={onlyOneLeft}\n      >\n        Deactivate {signInMethod.id}\n      </button>\n    ) : (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"New Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm New Password\"\n        />\n\n        <button disabled={isInvalid} type=\"submit\">\n          Link {signInMethod.id}\n        </button>\n      </form>\n    );\n  }\n}\n\nconst LoginManagement = withFirebase(LoginManagementBase);\n\nconst AccountPage = () => (\n  <AuthUserContext.Consumer>\n    {authUser => (\n      <div>\n        <h1>Account: {authUser.email}</h1>\n        {/*} <PasswordForgetForm /> */}\n        <PasswordChangeForm />\n        <LoginManagement authUser={authUser} />\n      </div>\n    )}\n  </AuthUserContext.Consumer>\n);\n\nconst condition = authUser => authUser != null;\n\nexport default withAuthorization(condition)(AccountPage);\n"]},"metadata":{},"sourceType":"module"}