"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var makeUrls_1 = require("./makeUrls");
var useAutoFocus = function () {
    var elementRef = React.useRef(null);
    React.useEffect(function () {
        var previous = document.activeElement;
        var element = elementRef.current;
        if (element) {
            element.focus();
        }
        if (previous instanceof HTMLElement) {
            return function () { return previous.focus(); };
        }
        return undefined;
    }, []);
    return elementRef;
};
var useOpenState = function (initialOpen) {
    var _a = React.useState(initialOpen), open = _a[0], setOpen = _a[1];
    var onToggle = function () { return setOpen(function (current) { return !current; }); };
    React.useEffect(function () {
        if (open) {
            var onClose_1 = function () { return setOpen(false); };
            document.addEventListener("click", onClose_1);
            return function () { return document.removeEventListener("click", onClose_1); };
        }
        return undefined;
    }, [open, setOpen]);
    return [open, onToggle];
};
var Calendar = React.forwardRef(function (_a, ref) {
    var children = _a.children, _b = _a.download, download = _b === void 0 ? false : _b, href = _a.href;
    return (React.createElement("a", { ref: ref, download: download, href: href, target: "_blank", rel: "noopener noreferrer" }, children));
});
var Dropdown = function (_a) {
    var onToggle = _a.onToggle, urls = _a.urls;
    var ref = useAutoFocus();
    var onKeyDown = function (event) {
        if (event.key === "Escape") {
            onToggle();
        }
    };
    return (React.createElement("div", { className: "chq-atc--dropdown", onKeyDown: onKeyDown, role: "presentation" },
        React.createElement(Calendar, { href: urls.ics, download: true, ref: ref }, "Apple Calendar"),
        React.createElement(Calendar, { href: urls.google }, "Google"),
        React.createElement(Calendar, { href: urls.ics, download: true }, "Outlook"),
        React.createElement(Calendar, { href: urls.outlook }, "Outlook Web App"),
        React.createElement(Calendar, { href: urls.yahoo }, "Yahoo")));
};
var AddToCalendar = function (_a) {
    var _b = _a.children, children = _b === void 0 ? "Add to My Calendar" : _b, event = _a.event, _c = _a.open, initialOpen = _c === void 0 ? false : _c;
    var _d = useOpenState(initialOpen), open = _d[0], onToggle = _d[1];
    var urls = React.useMemo(function () { return makeUrls_1.default(event); }, [event]);
    return (React.createElement("div", { className: "chq-atc" },
        event && (React.createElement("button", { type: "button", className: "chq-atc--button", onClick: onToggle },
            React.createElement("svg", { width: "20px", height: "20px", viewBox: "0 0 1024 1024" },
                React.createElement("path", { d: "M704 192v-64h-32v64h-320v-64h-32v64h-192v704h768v-704h-192z M864 864h-704v-480h704v480z M864 352h-704v-128h160v64h32v-64h320v64h32v-64h160v128z" })),
            " ",
            children)),
        open && React.createElement(Dropdown, { onToggle: onToggle, urls: urls })));
};
exports.default = AddToCalendar;
